/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package pl.jakubchmura.snmp.mib.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static pl.jakubchmura.snmp.mib.psi.SmiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_SmiLexer.flex</tt>
 */
public class _SmiLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\46\1\0\1\12\4\0\1\3\1\22\1\23\2\0\1\20\1\16\1\17\1\0"+
    "\2\4\10\7\1\32\1\21\1\30\1\33\3\0\1\40\1\5\1\45\1\47\1\42\1\51\1\53\1\10\1"+
    "\36\1\44\1\13\1\54\1\57\1\50\1\43\1\34\1\62\1\35\1\52\1\41\1\55\1\37\1\61"+
    "\1\60\1\56\1\63\1\26\1\0\1\27\1\0\1\15\1\0\1\14\1\6\4\14\1\13\1\11\22\13\1"+
    "\24\1\31\1\25\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0"+
    "\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\22\4\3\0\3\4\1\21"+
    "\1\0\1\22\1\23\1\24\1\0\26\4\1\25\26\4"+
    "\1\26\1\27\1\0\1\30\2\4\1\31\1\32\20\4"+
    "\1\33\7\4\1\34\24\4\1\35\6\4\1\36\2\4"+
    "\1\37\3\4\1\0\1\40\7\4\1\41\16\4\1\42"+
    "\1\43\23\4\1\44\1\45\1\4\1\46\20\4\1\47"+
    "\1\0\1\50\12\4\1\51\21\4\1\52\12\4\1\53"+
    "\5\4\1\54\2\4\1\55\2\4\1\56\4\4\1\0"+
    "\17\4\1\57\1\4\1\60\10\4\1\61\2\4\1\0"+
    "\1\62\6\4\1\63\3\4\1\64\1\65\2\4\1\66"+
    "\6\4\1\67\1\4\1\0\1\70\1\71\1\72\5\4"+
    "\1\73\1\4\1\74\1\75\12\4\1\76\2\4\1\0"+
    "\1\77\2\4\1\0\5\4\1\100\1\101\14\4\1\0"+
    "\2\4\1\102\2\4\1\103\1\104\4\4\1\105\4\4"+
    "\1\106\3\4\1\0\1\107\1\4\1\0\7\4\1\110"+
    "\1\111\11\4\1\0\2\4\1\112\1\4\1\113\1\114"+
    "\2\4\1\115\6\4\1\0\1\4\1\0\10\4\1\116"+
    "\7\4\1\117\2\4\1\120\3\4\1\121\1\122\3\4"+
    "\1\0\1\4\1\0\2\4\1\123\5\4\1\124\2\4"+
    "\1\125\5\4\1\126\3\4\1\127\1\4\1\0\1\4"+
    "\1\0\3\4\1\130\1\131\14\4\1\132\1\0\1\133"+
    "\1\134\1\4\1\135\1\136\1\4\1\137\4\4\1\140"+
    "\1\4\1\141\3\4\1\0\2\4\1\142\10\4\1\0"+
    "\3\4\1\143\3\4\1\144\2\4\1\145\1\0\4\4"+
    "\1\146\3\4\1\0\3\4\1\147\3\4\1\150\1\151"+
    "\1\152\1\4\1\153\1\154\1\155\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[596];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\64\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\234\0\u0618\0\u064c\0\u0680\0\u06b4\0\u0138\0\u016c\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0138\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\64\0\64\0\u10a8\0\u10dc\0\u1110\0\u1144\0\64\0\64"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u0138\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u0138\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u0138\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u0138\0\u1d0c\0\u1d40\0\u1d74"+
    "\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u0138\0\u1e78\0\u1eac\0\u1ee0"+
    "\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080"+
    "\0\u20b4\0\u20e8\0\u211c\0\u0138\0\u0138\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358"+
    "\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8"+
    "\0\u0138\0\u0138\0\u252c\0\u0138\0\u2560\0\u2594\0\u25c8\0\u25fc"+
    "\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c"+
    "\0\u27d0\0\u2804\0\u2838\0\u286c\0\u0138\0\u28a0\0\u0138\0\u28d4"+
    "\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74"+
    "\0\u2aa8\0\u0138\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0"+
    "\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80"+
    "\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20"+
    "\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u0138\0\u308c"+
    "\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u0138\0\u3190\0\u31c4\0\u0138"+
    "\0\u31f8\0\u322c\0\u0138\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330"+
    "\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0"+
    "\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c\0\u0138"+
    "\0\u3670\0\u0138\0\u36a4\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8"+
    "\0\u37dc\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u0138\0\u3914"+
    "\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u0138\0\u3a4c\0\u3a80"+
    "\0\u3ab4\0\u0138\0\u0138\0\u3ae8\0\u3b1c\0\u0138\0\u3b50\0\u3b84"+
    "\0\u3bb8\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0\0\u0138"+
    "\0\u0138\0\u0138\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4\0\u0138"+
    "\0\u3e28\0\u0138\0\u0138\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c"+
    "\0\u3f60\0\u3f94\0\u3fc8\0\u3ffc\0\u4030\0\u0138\0\u4064\0\u4098"+
    "\0\u40cc\0\u0138\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204"+
    "\0\u4238\0\u426c\0\u0138\0\u0138\0\u42a0\0\u42d4\0\u4308\0\u433c"+
    "\0\u4370\0\u43a4\0\u43d8\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc"+
    "\0\u4510\0\u4544\0\u4578\0\u0138\0\u45ac\0\u45e0\0\u0138\0\u0138"+
    "\0\u4614\0\u4648\0\u467c\0\u46b0\0\u0138\0\u46e4\0\u4718\0\u474c"+
    "\0\u4780\0\u0138\0\u47b4\0\u47e8\0\u481c\0\u4850\0\u0138\0\u4884"+
    "\0\u48b8\0\u48ec\0\u4920\0\u4954\0\u4988\0\u49bc\0\u49f0\0\u4a24"+
    "\0\u0138\0\u0138\0\u4a58\0\u4a8c\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c"+
    "\0\u4b90\0\u4bc4\0\u4bf8\0\u4c2c\0\u4c60\0\u4c94\0\u0138\0\u4cc8"+
    "\0\u0138\0\u0138\0\u4cfc\0\u4d30\0\u0138\0\u4d64\0\u4d98\0\u4dcc"+
    "\0\u4e00\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0\0\u4f04\0\u4f38\0\u4f6c"+
    "\0\u4fa0\0\u4fd4\0\u5008\0\u503c\0\u5070\0\u50a4\0\u0138\0\u50d8"+
    "\0\u510c\0\u5140\0\u5174\0\u51a8\0\u51dc\0\u5210\0\64\0\u5244"+
    "\0\u5278\0\u0138\0\u52ac\0\u52e0\0\u5314\0\u0138\0\u0138\0\u5348"+
    "\0\u537c\0\u53b0\0\u53e4\0\u5418\0\u544c\0\u5480\0\u54b4\0\u0138"+
    "\0\u54e8\0\u551c\0\u5550\0\u5584\0\u55b8\0\u0138\0\u55ec\0\u5620"+
    "\0\u0138\0\u5654\0\u5688\0\u56bc\0\u56f0\0\u5724\0\u0138\0\u5758"+
    "\0\u578c\0\u57c0\0\u0138\0\u57f4\0\u5828\0\u585c\0\u5890\0\u58c4"+
    "\0\u58f8\0\u592c\0\u0138\0\u0138\0\u5960\0\u5994\0\u59c8\0\u59fc"+
    "\0\u5a30\0\u5a64\0\u5a98\0\u5acc\0\u5b00\0\u5b34\0\u5b68\0\u5b9c"+
    "\0\u0138\0\u5bd0\0\u0138\0\64\0\u5c04\0\u0138\0\u0138\0\u5c38"+
    "\0\u0138\0\u5c6c\0\u5ca0\0\u5cd4\0\u5d08\0\u0138\0\u5d3c\0\u0138"+
    "\0\u5d70\0\u5da4\0\u5dd8\0\u5e0c\0\u5e40\0\u5e74\0\u0138\0\u5ea8"+
    "\0\u5edc\0\u5f10\0\u5f44\0\u5f78\0\u5fac\0\u5fe0\0\u6014\0\u6048"+
    "\0\u607c\0\u60b0\0\u60e4\0\u0138\0\u6118\0\u614c\0\u6180\0\u0138"+
    "\0\u61b4\0\u61e8\0\u0138\0\u621c\0\u6250\0\u6284\0\u62b8\0\u62ec"+
    "\0\u0138\0\u6320\0\u6354\0\u6388\0\u63bc\0\u63f0\0\u6424\0\u6458"+
    "\0\u0138\0\u648c\0\u64c0\0\u64f4\0\64\0\u0138\0\u0138\0\u6528"+
    "\0\u0138\0\u0138\0\u0138\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[596];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\5\2\7"+
    "\1\10\2\7\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\2\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\7\1\36\1\3\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\7\1\46\1\7\1\47\2\7"+
    "\65\0\2\3\43\0\1\3\20\0\1\50\1\51\3\52"+
    "\4\0\1\52\23\0\1\52\1\0\1\52\2\0\1\52"+
    "\1\0\1\52\1\0\1\52\16\0\1\5\2\0\1\5"+
    "\60\0\6\7\1\0\4\7\15\0\2\7\1\53\3\7"+
    "\1\54\1\55\2\7\1\0\7\7\1\56\5\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\15\7\12\57"+
    "\1\60\51\57\16\0\1\61\64\0\1\62\76\0\1\63"+
    "\35\0\6\7\1\0\4\7\15\0\1\7\1\64\10\7"+
    "\1\0\5\7\1\65\7\7\4\0\6\7\1\0\4\7"+
    "\15\0\6\7\1\66\3\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\67\1\70\6\7"+
    "\1\71\4\7\4\0\6\7\1\0\4\7\15\0\4\7"+
    "\1\72\5\7\1\0\15\7\4\0\1\7\1\73\4\7"+
    "\1\0\4\7\15\0\1\74\10\7\1\75\1\0\1\7"+
    "\1\76\2\7\1\77\1\7\1\100\6\7\4\0\6\7"+
    "\1\0\4\7\15\0\1\7\1\101\2\7\1\102\1\7"+
    "\1\103\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\104\7\7\1\105\3\7"+
    "\4\0\1\7\1\106\4\7\1\0\4\7\15\0\1\107"+
    "\1\110\7\7\1\111\1\0\2\7\1\112\12\7\4\0"+
    "\4\7\1\113\1\7\1\0\4\7\15\0\1\7\1\114"+
    "\5\7\1\115\2\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\2\7\1\116\3\7\1\117\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\7\7\1\120"+
    "\2\7\1\0\6\7\1\121\6\7\4\0\6\7\1\0"+
    "\4\7\15\0\1\7\1\122\2\7\1\123\5\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\124"+
    "\2\7\1\125\1\126\3\7\1\0\6\7\1\127\1\130"+
    "\5\7\4\0\6\7\1\0\4\7\15\0\1\7\1\131"+
    "\10\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\4\7\1\132\5\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\7\1\133\13\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\134\1\7\1\135"+
    "\2\7\1\136\2\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\1\7\1\137\1\140\7\7\1\0\15\7"+
    "\5\0\2\141\1\0\2\142\55\0\1\143\4\52\4\0"+
    "\1\52\23\0\1\52\1\0\1\52\2\0\1\52\1\0"+
    "\1\52\1\0\1\52\16\0\6\7\1\0\4\7\15\0"+
    "\5\7\1\144\4\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\4\7\1\145\10\7\4\0"+
    "\6\7\1\0\4\7\15\0\7\7\1\146\2\7\1\0"+
    "\15\7\12\0\1\57\51\0\1\61\1\0\62\61\17\0"+
    "\1\147\77\0\1\150\34\0\6\7\1\0\4\7\15\0"+
    "\2\7\1\151\3\7\1\152\1\153\2\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\6\7"+
    "\1\154\6\7\4\0\6\7\1\0\4\7\15\0\3\7"+
    "\1\155\1\156\5\7\1\0\2\7\1\157\12\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\160\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\5\7\1\161"+
    "\3\7\1\162\1\0\1\163\14\7\4\0\6\7\1\0"+
    "\4\7\15\0\1\164\11\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\1\7\1\165\10\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\3\7"+
    "\1\166\11\7\4\0\6\7\1\0\4\7\15\0\1\167"+
    "\11\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\11\7\1\170\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\7\7\1\171\5\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\172\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\4\7"+
    "\1\173\10\7\4\0\6\7\1\0\4\7\15\0\4\7"+
    "\1\174\5\7\1\0\6\7\1\175\6\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\4\7\1\176\10\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\11\7"+
    "\1\177\3\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\200\4\7\1\0\1\201\5\7\1\202\6\7\4\0"+
    "\6\7\1\0\4\7\15\0\1\203\11\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\10\7\1\204\1\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\205\4\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\4\7\1\206\10\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\207\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\210\2\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\211\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\212\6\7\1\213\4\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\3\7"+
    "\1\214\11\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\2\7\1\215\1\216\11\7\4\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\217\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\5\7\1\220"+
    "\7\7\4\0\6\7\1\0\4\7\15\0\7\7\1\221"+
    "\2\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\5\7\1\222\7\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\14\7\1\223\4\0\6\7"+
    "\1\0\4\7\15\0\1\7\1\224\2\7\1\225\5\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\226\4\7\1\0\13\7\1\227\1\7\4\0\6\7"+
    "\1\0\4\7\15\0\1\230\11\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\1\7\1\231"+
    "\13\7\4\0\6\7\1\0\4\7\15\0\7\7\1\232"+
    "\2\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\3\7\1\233\11\7\4\0\6\7\1\0"+
    "\4\7\15\0\2\7\1\234\7\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\1\7\1\235"+
    "\13\7\4\0\6\7\1\0\4\7\15\0\11\7\1\236"+
    "\1\0\1\7\1\237\7\7\1\240\3\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\241\14\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\242\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\5\7\1\243"+
    "\4\7\1\0\15\7\10\0\2\142\56\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\244\3\7\1\245\11\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\246\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\12\7\1\0"+
    "\5\7\1\247\7\7\4\0\6\7\1\0\4\7\15\0"+
    "\3\7\1\250\6\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\3\7\1\251\11\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\1\252\14\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\3\7"+
    "\1\253\11\7\4\0\6\7\1\0\4\7\15\0\2\7"+
    "\1\254\7\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\5\7\1\255\7\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\256\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\1\7"+
    "\1\257\13\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\260\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\5\7\1\261\7\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\262\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\263\2\7"+
    "\1\0\5\7\1\264\7\7\4\0\6\7\1\0\4\7"+
    "\15\0\2\7\1\265\7\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\266\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\5\7"+
    "\1\267\7\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\270\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\271\13\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\10\7\1\272\4\7"+
    "\4\0\6\7\1\0\4\7\15\0\1\273\11\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\6\7\1\274"+
    "\3\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\3\7\1\275\11\7\4\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\276\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\277\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\12\7\1\0"+
    "\10\7\1\300\4\7\4\0\6\7\1\0\4\7\15\0"+
    "\7\7\1\301\2\7\1\0\5\7\1\302\7\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\303\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\304"+
    "\7\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\4\7\1\305\5\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\6\7\1\306\3\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\307\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\4\7\1\310"+
    "\5\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\5\7\1\311\4\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\1\312\11\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\1\313\11\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\314\1\315\1\316"+
    "\5\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\11\7\1\317\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\2\7\1\320\7\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\5\7\1\321\7\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\10\7"+
    "\1\322\4\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\323\11\7\4\0\6\7\1\0\4\7"+
    "\15\0\6\7\1\324\3\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\2\7\1\325\7\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\5\7\1\326\4\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\6\7\1\327\6\7\4\0\6\7\1\0\4\7"+
    "\15\0\1\330\11\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\331\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\6\7\1\332"+
    "\6\7\4\0\6\7\1\0\4\7\15\0\5\7\1\333"+
    "\4\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\3\7\1\334\1\7\1\335\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\3\7\1\336\15\0\12\7\1\0\6\7"+
    "\1\337\6\7\4\0\6\7\1\0\4\7\15\0\1\7"+
    "\1\340\10\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\341\14\7\4\0\6\7\1\0"+
    "\3\7\1\342\15\0\12\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\6\7\1\343\6\7"+
    "\4\0\6\7\1\0\4\7\15\0\5\7\1\344\4\7"+
    "\1\0\15\7\4\0\4\7\1\345\1\7\1\0\4\7"+
    "\15\0\12\7\1\0\15\7\52\0\1\346\15\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\7\1\347\13\7"+
    "\4\0\6\7\1\0\4\7\15\0\6\7\1\350\3\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\4\7"+
    "\1\351\5\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\6\7\1\352\3\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\6\7\1\353\6\7"+
    "\4\0\6\7\1\0\3\7\1\354\15\0\12\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\12\7\1\0"+
    "\3\7\1\355\11\7\4\0\6\7\1\0\4\7\15\0"+
    "\1\7\1\356\10\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\357\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\4\7\1\360"+
    "\10\7\4\0\6\7\1\0\4\7\15\0\12\7\1\0"+
    "\6\7\1\361\6\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\11\7\1\362\3\7\4\0\6\7\1\0"+
    "\4\7\15\0\1\7\1\363\10\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\364\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\4\7\1\365"+
    "\5\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\1\7\1\366\13\7\4\0\6\7\1\0"+
    "\4\7\15\0\2\7\1\367\7\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\3\7\1\370"+
    "\11\7\4\0\6\7\1\0\4\7\15\0\5\7\1\371"+
    "\4\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\6\7\1\372\3\7\1\0\15\7\4\0\6\7\1\0"+
    "\3\7\1\373\15\0\12\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\6\7\1\374\6\7"+
    "\4\0\6\7\1\0\4\7\15\0\1\7\1\375\10\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\376\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\1\7\1\377\10\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\2\7\1\u0100\7\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\11\7\1\u0101\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\7\7\1\u0102"+
    "\2\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\1\7\1\u0103\13\7\4\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\u0104\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\11\7\1\u0105\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\5\7\1\u0106\4\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\4\7"+
    "\1\u0107\5\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\7\7\1\u0108\2\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\5\7\1\u0109\7\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\1\7"+
    "\1\u010a\13\7\4\0\6\7\1\0\4\7\15\0\4\7"+
    "\1\u010b\5\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\6\7\1\u010c\6\7\4\0\6\7"+
    "\1\0\4\7\15\0\1\7\1\u010d\10\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\2\7"+
    "\1\u010e\12\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\u010f\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\u0110\13\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\6\7\1\u0111\6\7"+
    "\4\0\6\7\1\0\4\7\15\0\6\7\1\u0112\3\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\7\7"+
    "\1\u0113\2\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\4\7\1\u0114\5\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\1\u0115\11\7\1\0\15\7\4\0"+
    "\6\7\1\0\3\7\1\u0116\15\0\12\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\6\7\1\u0117\3\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\u0118\11\7\4\0\6\7\1\0\4\7"+
    "\15\0\4\7\1\u0119\5\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\3\7\1\u011a\11\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\u011b\2\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\4\7"+
    "\1\u011c\5\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\4\7\1\u011d\5\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\5\7\1\u011e\7\7"+
    "\4\0\6\7\1\0\4\7\15\0\6\7\1\u011f\3\7"+
    "\1\0\15\7\41\0\1\u0120\26\0\6\7\1\0\4\7"+
    "\15\0\4\7\1\u0121\5\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u0122\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\1\7"+
    "\1\u0123\13\7\4\0\6\7\1\0\4\7\15\0\11\7"+
    "\1\u0124\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\2\7\1\u0125\7\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\2\7\1\u0126\7\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\u0127\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\u0128"+
    "\7\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\6\7\1\u0129\3\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\u012a\14\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u012b\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\6\7\1\u012c\2\7"+
    "\1\u012d\1\0\15\7\4\0\1\7\1\u012e\4\7\1\0"+
    "\4\7\15\0\5\7\1\u012f\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\5\7\1\u0130\4\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\11\7\1\u0131"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\u0132\11\7\4\0\6\7\1\0\3\7"+
    "\1\u0133\15\0\12\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\7\1\u0134\13\7\4\0"+
    "\6\7\1\0\4\7\15\0\5\7\1\u0135\4\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\4\7\1\u0136"+
    "\5\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\1\u0137\11\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\1\7\1\u0138\10\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u0139\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\11\7\1\u013a\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\5\7\1\u013b"+
    "\4\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\1\7\1\u013c\13\7\4\0\6\7\1\0"+
    "\4\7\15\0\2\7\1\u013d\7\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\u013e\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\u013f\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\u0140"+
    "\7\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\11\7\1\u0141\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\u0142\13\7\4\0\6\7"+
    "\1\0\4\7\15\0\4\7\1\u0143\5\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\2\7\1\u0144\3\7"+
    "\1\u0145\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\5\7\1\u0146\7\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\5\7\1\u0147\7\7"+
    "\4\0\6\7\1\0\4\7\15\0\2\7\1\u0148\7\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\2\7"+
    "\1\u0149\7\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\4\7\1\u014a\10\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\3\7\1\u014b\11\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\1\7"+
    "\1\u014c\13\7\4\0\6\7\1\0\4\7\15\0\1\7"+
    "\1\u014d\10\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\11\7\1\u014e\3\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\6\7\1\u014f\6\7"+
    "\4\0\6\7\1\0\4\7\15\0\1\7\1\u0150\10\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\11\7"+
    "\1\u0151\1\0\15\7\4\0\6\7\1\0\3\7\1\u0152"+
    "\15\0\12\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u0153\4\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\11\7\1\u0154\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\u0155\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\3\7\1\u0156\15\0\12\7"+
    "\1\0\15\7\35\0\1\u0157\32\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\u0158\13\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\u0159\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\5\7\1\u015a\4\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\u015b\4\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\u015c\13\7\4\0\6\7"+
    "\1\0\4\7\15\0\7\7\1\u015d\2\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\1\7"+
    "\1\u015e\13\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\2\7\1\u015f\12\7\4\0\6\7\1\0\4\7"+
    "\15\0\1\7\1\u0160\10\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\u0161\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\3\7"+
    "\1\u0162\11\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\1\u0163\14\7\4\0\6\7\1\0\4\7\15\0"+
    "\2\7\1\u0164\7\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\5\7\1\u0165\7\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\u0166\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\4\7\1\u0167"+
    "\5\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\11\7\1\u0168\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u0169\4\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\7\7\1\u016a\5\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\5\7"+
    "\1\u016b\7\7\4\0\6\7\1\0\4\7\15\0\1\7"+
    "\1\u016c\10\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\4\7\1\u016d\5\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\3\7\1\u016e\11\7"+
    "\4\0\6\7\1\0\4\7\15\0\2\7\1\u016f\7\7"+
    "\1\0\15\7\4\0\6\7\1\0\3\7\1\u0170\15\0"+
    "\12\7\1\u0171\3\7\1\u0172\11\7\4\0\6\7\1\0"+
    "\4\7\15\0\4\7\1\u0173\5\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\14\7\1\u0174"+
    "\52\0\1\u0175\15\0\6\7\1\0\4\7\15\0\7\7"+
    "\1\u0176\2\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u0177\4\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\u0178\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\7\7"+
    "\1\u0179\5\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\u017a\4\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\u017b\14\7\4\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\u017c\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\1\u017d\11\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\11\7\1\u017e\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\11\7\1\u017f"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\u0180\4\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\1\u0181\11\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\3\7\1\u0182\11\7\4\0"+
    "\6\7\1\0\4\7\15\0\11\7\1\u0183\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\2\7\1\u0184\7\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\7\7"+
    "\1\u0185\2\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\11\7\1\u0186\1\0\15\7\4\0\6\7\1\0"+
    "\3\7\1\u0187\15\0\12\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\3\7\1\u0188\11\7"+
    "\36\0\1\u0189\31\0\6\7\1\0\3\7\1\u018a\15\0"+
    "\12\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\2\7\1\u018b\12\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\7\1\u018c\13\7\4\0"+
    "\6\7\1\0\4\7\15\0\11\7\1\u018d\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\2\7\1\u018e\7\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\u018f\11\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u0190\4\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\u0191\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\u0192\2\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\u0193\4\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\4\7\1\u0194\5\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\3\7\1\u0195\11\7"+
    "\4\0\6\7\1\0\4\7\15\0\1\u0196\11\7\1\0"+
    "\15\7\4\0\6\7\1\0\3\7\1\u0197\15\0\12\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\2\7"+
    "\1\u0198\7\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u0199\4\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u019a\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\2\7\1\u019b\2\7"+
    "\1\u019c\4\7\1\0\4\7\1\u019d\10\7\36\0\1\u019e"+
    "\31\0\6\7\1\0\4\7\15\0\12\7\1\0\5\7"+
    "\1\u019f\7\7\4\0\6\7\1\0\4\7\15\0\4\7"+
    "\1\u01a0\5\7\1\0\15\7\41\0\1\u01a1\26\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\7\1\u01a2\13\7"+
    "\4\0\6\7\1\0\3\7\1\u01a3\15\0\12\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\12\7\1\0"+
    "\1\7\1\u01a4\13\7\4\0\6\7\1\0\3\7\1\u01a5"+
    "\15\0\12\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\2\7\1\u01a6\7\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u01a7\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\4\7\1\u01a8\5\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\u01a9\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\3\7\1\u01aa\11\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\u01ab\14\7\4\0"+
    "\6\7\1\0\4\7\15\0\4\7\1\u01ac\5\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\6\7\1\u01ad"+
    "\3\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\1\7\1\u01ae\13\7\4\0\6\7\1\0"+
    "\4\7\15\0\1\7\1\u01af\10\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\u01b0\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\u01b1"+
    "\6\7\1\u01b2\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\7\7\1\u01b3\5\7\50\0\1\u01b4"+
    "\17\0\6\7\1\0\4\7\15\0\1\7\1\u01b5\10\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\2\7"+
    "\1\u01b6\7\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\6\7\1\u01b7\3\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\u01b8\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\3\7"+
    "\1\u01b9\11\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\1\7\1\u01ba\13\7\4\0\6\7\1\0\4\7"+
    "\15\0\2\7\1\u01bb\7\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\1\u01bc\11\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\u01bd\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\11\7\1\u01be"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\u01bf\11\7\4\0\6\7\1\0\4\7"+
    "\15\0\6\7\1\u01c0\3\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\u01c1\14\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\7\7\1\u01c2"+
    "\5\7\4\0\6\7\1\0\4\7\15\0\1\7\1\u01c3"+
    "\10\7\1\0\15\7\47\0\1\u01c4\20\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\u01c5\4\7\1\0\15\7\35\0"+
    "\1\u01c6\32\0\6\7\1\0\3\7\1\u01c7\15\0\12\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\2\7"+
    "\1\u01c8\7\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u01c9\4\7\1\0\15\7\4\0\4\7"+
    "\1\u01ca\1\7\1\0\4\7\15\0\12\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\u01cb\2\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\2\7"+
    "\1\u01cc\7\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u01cd\4\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\4\7\1\u01ce\5\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\5\7"+
    "\1\u01cf\7\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\u01d0\11\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\2\7\1\u01d1\12\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\7\7\1\u01d2\5\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\3\7"+
    "\1\u01d3\11\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\1\u01d4\14\7\4\0\6\7\1\0\4\7\15\0"+
    "\7\7\1\u01d5\2\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\7\1\u01d6\13\7\53\0"+
    "\1\u01d7\14\0\6\7\1\0\4\7\15\0\6\7\1\u01d8"+
    "\3\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\1\7\1\u01d9\13\7\4\0\6\7\1\0"+
    "\4\7\15\0\1\7\1\u01da\10\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\7\7\1\u01db\2\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\4\7\1\u01dc"+
    "\5\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\7\7\1\u01dd\2\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\6\7\1\u01de\3\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\1\u01df\14\7"+
    "\4\0\6\7\1\0\4\7\15\0\6\7\1\u01e0\3\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\1\u01e1"+
    "\11\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\7\7\1\u01e2\2\7\1\0\15\7\42\0\1\u01e3\25\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\u01e4\7\7\1\0"+
    "\15\7\36\0\1\u01e5\31\0\6\7\1\0\4\7\15\0"+
    "\1\7\1\u01e6\10\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\7\1\u01e7\13\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\3\7\1\u01e8"+
    "\11\7\4\0\6\7\1\0\4\7\15\0\2\7\1\u01e9"+
    "\7\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\1\7\1\u01ea\13\7\4\0\6\7\1\0"+
    "\4\7\15\0\7\7\1\u01eb\2\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\u01ec\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\5\7\1\u01ed"+
    "\4\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\3\7\1\u01ee\11\7\4\0\6\7\1\0"+
    "\4\7\15\0\2\7\1\u01ef\7\7\1\0\15\7\4\0"+
    "\6\7\1\0\3\7\1\u01f0\15\0\12\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\3\7"+
    "\1\u01f1\11\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\u01f2\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\10\7\1\u01f3\4\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u01f4\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\5\7"+
    "\1\u01f5\7\7\4\0\6\7\1\0\4\7\15\0\2\7"+
    "\1\u01f6\7\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\u01f7\13\7\4\0\1\7"+
    "\1\u01f8\4\7\1\0\4\7\15\0\12\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\1\7"+
    "\1\u01f9\13\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\1\7\1\u01fa\13\7\4\0\6\7\1\0\4\7"+
    "\15\0\6\7\1\u01fb\3\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\6\7\1\u01fc\6\7"+
    "\50\0\1\u01fd\17\0\6\7\1\0\4\7\15\0\7\7"+
    "\1\u01fe\2\7\1\0\15\7\50\0\1\u01ff\17\0\6\7"+
    "\1\0\4\7\15\0\6\7\1\u0200\3\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\2\7"+
    "\1\u0201\12\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\1\7\1\u0202\13\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\3\7\1\u0203\11\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\7\1\u0204\13\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\u0205\2\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\u0206\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\u0207\13\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\4\7\1\u0208\10\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\1\7"+
    "\1\u0209\13\7\4\0\6\7\1\0\4\7\15\0\1\u020a"+
    "\11\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\4\7\1\u020b\5\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\6\7\1\u020c\3\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\5\7\1\u020d\4\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\u020e"+
    "\7\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\3\7\1\u020f\6\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\5\7\1\u0210\4\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\1\u0211\11\7\1\0\15\7"+
    "\41\0\1\u0212\26\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\1\7\1\u0213\13\7\53\0\1\u0214\14\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\13\7\1\u0215\1\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\u0216\2\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\u0217\4\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\1\7\1\u0218\13\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\u0219\14\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\u021a\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\1\7\1\u021b"+
    "\10\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\5\7\1\u021c\4\7\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\5\7\1\u021d\7\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\11\7\1\u021e"+
    "\3\7\4\0\6\7\1\0\4\7\15\0\4\7\1\u021f"+
    "\5\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\7\7\1\u0220\5\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\5\7\1\u0221\7\7\4\0"+
    "\6\7\1\0\4\7\15\0\6\7\1\u0222\3\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\u0223"+
    "\7\7\1\0\15\7\36\0\1\u0224\31\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\6\7\1\u0225\6\7\4\0"+
    "\6\7\1\0\3\7\1\u0226\15\0\12\7\1\0\3\7"+
    "\1\u0227\11\7\4\0\6\7\1\0\4\7\15\0\5\7"+
    "\1\u0228\4\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\7\7\1\u0229\2\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\2\7\1\u022a\7\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\2\7\1\u022b\7\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\u022c\11\7\4\0\6\7\1\0\4\7"+
    "\15\0\2\7\1\u022d\7\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\1\7\1\u022e\13\7"+
    "\4\0\6\7\1\0\4\7\15\0\5\7\1\u022f\4\7"+
    "\1\0\15\7\51\0\1\u0230\16\0\6\7\1\0\4\7"+
    "\15\0\2\7\1\u0231\7\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u0232\4\7\1\0\4\7"+
    "\1\u0233\10\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\7\7\1\u0234\5\7\4\0\6\7\1\0\4\7"+
    "\15\0\12\7\1\0\6\7\1\u0235\6\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u0236\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\4\7\1\u0237\5\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\6\7"+
    "\1\u0238\3\7\1\0\15\7\4\0\6\7\1\0\4\7"+
    "\15\0\5\7\1\u0239\4\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\5\7\1\u023a\4\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\12\7\1\0\7\7"+
    "\1\u023b\5\7\36\0\1\u023c\31\0\6\7\1\0\4\7"+
    "\15\0\1\7\1\u023d\10\7\1\0\15\7\4\0\6\7"+
    "\1\0\4\7\15\0\12\7\1\0\7\7\1\u023e\5\7"+
    "\4\0\6\7\1\0\4\7\15\0\1\7\1\u023f\10\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\1\u0240"+
    "\11\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\7\7\1\u0241\5\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\7\1\u0242\13\7\4\0"+
    "\6\7\1\0\4\7\15\0\2\7\1\u0243\7\7\1\0"+
    "\15\7\4\0\6\7\1\0\4\7\15\0\2\7\1\u0244"+
    "\7\7\1\0\15\7\42\0\1\u0245\25\0\6\7\1\0"+
    "\4\7\15\0\6\7\1\u0246\3\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\1\u0247\11\7\1\0\15\7"+
    "\4\0\6\7\1\0\4\7\15\0\7\7\1\u0248\2\7"+
    "\1\0\15\7\4\0\6\7\1\0\4\7\15\0\12\7"+
    "\1\0\3\7\1\u0249\11\7\4\0\6\7\1\0\4\7"+
    "\15\0\11\7\1\u024a\1\0\15\7\4\0\6\7\1\0"+
    "\4\7\15\0\6\7\1\u024b\3\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\7\7\1\u024c\2\7\1\0"+
    "\15\7\35\0\1\u024d\32\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\3\7\1\u024e\11\7\4\0\6\7\1\0"+
    "\4\7\15\0\6\7\1\u024f\3\7\1\0\15\7\4\0"+
    "\6\7\1\0\4\7\15\0\12\7\1\0\6\7\1\u0250"+
    "\6\7\4\0\6\7\1\0\4\7\15\0\6\7\1\u0251"+
    "\3\7\1\0\15\7\4\0\6\7\1\0\4\7\15\0"+
    "\12\7\1\0\3\7\1\u0252\11\7\4\0\6\7\1\0"+
    "\4\7\15\0\12\7\1\0\1\7\1\u0253\13\7\4\0"+
    "\6\7\1\0\4\7\15\0\1\u0254\11\7\1\0\15\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25948];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\12\11\23\1\3\0\4\1\1\0"+
    "\3\1\1\0\55\1\2\11\1\0\3\1\2\11\73\1"+
    "\1\0\101\1\1\0\71\1\1\0\35\1\1\0\30\1"+
    "\1\0\31\1\1\0\3\1\1\0\23\1\1\0\24\1"+
    "\1\0\2\1\1\0\22\1\1\0\17\1\1\0\1\1"+
    "\1\0\20\1\1\11\13\1\1\0\1\1\1\0\27\1"+
    "\1\0\1\1\1\0\22\1\1\0\1\1\1\11\17\1"+
    "\1\0\13\1\1\0\13\1\1\0\10\1\1\0\7\1"+
    "\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[596];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SmiLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SmiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 111: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 112: break;
          case 3: 
            { return NUMBER_LITERAL;
            } 
            // fall through
          case 113: break;
          case 4: 
            { return IDENTIFIER_STRING;
            } 
            // fall through
          case 114: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 115: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 116: break;
          case 7: 
            { return COMMA;
            } 
            // fall through
          case 117: break;
          case 8: 
            { return SEMI_COLON;
            } 
            // fall through
          case 118: break;
          case 9: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 119: break;
          case 10: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 120: break;
          case 11: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 121: break;
          case 12: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 122: break;
          case 13: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 123: break;
          case 14: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 124: break;
          case 15: 
            { return LESS_THAN;
            } 
            // fall through
          case 125: break;
          case 16: 
            { return VERTICAL_BAR;
            } 
            // fall through
          case 126: break;
          case 17: 
            { return BY;
            } 
            // fall through
          case 127: break;
          case 18: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 128: break;
          case 19: 
            { return COMMENT;
            } 
            // fall through
          case 129: break;
          case 20: 
            { return DOUBLE_DOT;
            } 
            // fall through
          case 130: break;
          case 21: 
            { return OF;
            } 
            // fall through
          case 131: break;
          case 22: 
            { return BINARY_LITERAL;
            } 
            // fall through
          case 132: break;
          case 23: 
            { return HEXADECIMAL_LITERAL;
            } 
            // fall through
          case 133: break;
          case 24: 
            { return BIT;
            } 
            // fall through
          case 134: break;
          case 25: 
            { return TRIPLE_DOT;
            } 
            // fall through
          case 135: break;
          case 26: 
            { return DEFINITION;
            } 
            // fall through
          case 136: break;
          case 27: 
            { return ANY;
            } 
            // fall through
          case 137: break;
          case 28: 
            { return END;
            } 
            // fall through
          case 138: break;
          case 29: 
            { return SET;
            } 
            // fall through
          case 139: break;
          case 30: 
            { return MIN;
            } 
            // fall through
          case 140: break;
          case 31: 
            { return MAX;
            } 
            // fall through
          case 141: break;
          case 32: 
            { return BITS;
            } 
            // fall through
          case 142: break;
          case 33: 
            { return REAL;
            } 
            // fall through
          case 143: break;
          case 34: 
            { return TRUE;
            } 
            // fall through
          case 144: break;
          case 35: 
            { return TAGS;
            } 
            // fall through
          case 145: break;
          case 36: 
            { return NULL;
            } 
            // fall through
          case 146: break;
          case 37: 
            { return FROM;
            } 
            // fall through
          case 147: break;
          case 38: 
            { return SIZE;
            } 
            // fall through
          case 148: break;
          case 39: 
            { return WITH;
            } 
            // fall through
          case 149: break;
          case 40: 
            { return BEGIN;
            } 
            // fall through
          case 150: break;
          case 41: 
            { return INDEX;
            } 
            // fall through
          case 151: break;
          case 42: 
            { return OCTET;
            } 
            // fall through
          case 152: break;
          case 43: 
            { return FALSE;
            } 
            // fall through
          case 153: break;
          case 44: 
            { return GROUP;
            } 
            // fall through
          case 154: break;
          case 45: 
            { return UNITS;
            } 
            // fall through
          case 155: break;
          case 46: 
            { return MACRO;
            } 
            // fall through
          case 156: break;
          case 47: 
            { return ABSENT;
            } 
            // fall through
          case 157: break;
          case 48: 
            { return ACCESS;
            } 
            // fall through
          case 158: break;
          case 49: 
            { return OBJECT;
            } 
            // fall through
          case 159: break;
          case 50: 
            { return CHOICE;
            } 
            // fall through
          case 160: break;
          case 51: 
            { return DEFVAL;
            } 
            // fall through
          case 161: break;
          case 52: 
            { return STRING;
            } 
            // fall through
          case 162: break;
          case 53: 
            { return STATUS;
            } 
            // fall through
          case 163: break;
          case 54: 
            { return SYNTAX;
            } 
            // fall through
          case 164: break;
          case 55: 
            { return MODULE;
            } 
            // fall through
          case 165: break;
          case 56: 
            { return BOOLEAN;
            } 
            // fall through
          case 166: break;
          case 57: 
            { return PRIVATE;
            } 
            // fall through
          case 167: break;
          case 58: 
            { return PRESENT;
            } 
            // fall through
          case 168: break;
          case 59: 
            { return INTEGER;
            } 
            // fall through
          case 169: break;
          case 60: 
            { return IMPORTS;
            } 
            // fall through
          case 170: break;
          case 61: 
            { return IMPLIED;
            } 
            // fall through
          case 171: break;
          case 62: 
            { return EXPORTS;
            } 
            // fall through
          case 172: break;
          case 63: 
            { return OBJECTS;
            } 
            // fall through
          case 173: break;
          case 64: 
            { return DEFINED;
            } 
            // fall through
          case 174: break;
          case 65: 
            { return DEFAULT;
            } 
            // fall through
          case 175: break;
          case 66: 
            { return REVISION;
            } 
            // fall through
          case 176: break;
          case 67: 
            { return INCLUDES;
            } 
            // fall through
          case 177: break;
          case 68: 
            { return IMPLICIT;
            } 
            // fall through
          case 178: break;
          case 69: 
            { return AUGMENTS;
            } 
            // fall through
          case 179: break;
          case 70: 
            { return EXPLICIT;
            } 
            // fall through
          case 180: break;
          case 71: 
            { return OPTIONAL;
            } 
            // fall through
          case 181: break;
          case 72: 
            { return SEQUENCE;
            } 
            // fall through
          case 182: break;
          case 73: 
            { return SUPPORTS;
            } 
            // fall through
          case 183: break;
          case 74: 
            { return REFERENCE;
            } 
            // fall through
          case 184: break;
          case 75: 
            { return VARIABLES;
            } 
            // fall through
          case 185: break;
          case 76: 
            { return VARIATION;
            } 
            // fall through
          case 186: break;
          case 77: 
            { return TRAP_TYPE;
            } 
            // fall through
          case 187: break;
          case 78: 
            { return UNIVERSAL;
            } 
            // fall through
          case 188: break;
          case 79: 
            { return BIT_STRING;
            } 
            // fall through
          case 189: break;
          case 80: 
            { return IDENTIFIER;
            } 
            // fall through
          case 190: break;
          case 81: 
            { return ENTERPRISE;
            } 
            // fall through
          case 191: break;
          case 82: 
            { return ENUMERATED;
            } 
            // fall through
          case 192: break;
          case 83: 
            { return COMPONENTS;
            } 
            // fall through
          case 193: break;
          case 84: 
            { return MIN_ACCESS;
            } 
            // fall through
          case 194: break;
          case 85: 
            { return MAX_ACCESS;
            } 
            // fall through
          case 195: break;
          case 86: 
            { return APPLICATION;
            } 
            // fall through
          case 196: break;
          case 87: 
            { return OBJECT_TYPE;
            } 
            // fall through
          case 197: break;
          case 88: 
            { return DEFINITIONS;
            } 
            // fall through
          case 198: break;
          case 89: 
            { return DESCRIPTION;
            } 
            // fall through
          case 199: break;
          case 90: 
            { return OBJECT_GROUP;
            } 
            // fall through
          case 200: break;
          case 91: 
            { return ORGANIZATION;
            } 
            // fall through
          case 201: break;
          case 92: 
            { return OCTET_STRING;
            } 
            // fall through
          case 202: break;
          case 93: 
            { return CONTACT_INFO;
            } 
            // fall through
          case 203: break;
          case 94: 
            { return DISPLAY_HINT;
            } 
            // fall through
          case 204: break;
          case 95: 
            { return LAST_UPDATED;
            } 
            // fall through
          case 205: break;
          case 96: 
            { return WRITE_SYNTAX;
            } 
            // fall through
          case 206: break;
          case 97: 
            { return PLUS_INFINITY;
            } 
            // fall through
          case 207: break;
          case 98: 
            { return NOTIFICATIONS;
            } 
            // fall through
          case 208: break;
          case 99: 
            { return MINUS_INFINITY;
            } 
            // fall through
          case 209: break;
          case 100: 
            { return PRODUCT_RELEASE;
            } 
            // fall through
          case 210: break;
          case 101: 
            { return OBJECT_IDENTITY;
            } 
            // fall through
          case 211: break;
          case 102: 
            { return MODULE_IDENTITY;
            } 
            // fall through
          case 212: break;
          case 103: 
            { return MANDATORY_GROUPS;
            } 
            // fall through
          case 213: break;
          case 104: 
            { return OBJECT_IDENTIFIER;
            } 
            // fall through
          case 214: break;
          case 105: 
            { return CREATION_REQUIRES;
            } 
            // fall through
          case 215: break;
          case 106: 
            { return NOTIFICATION_TYPE;
            } 
            // fall through
          case 216: break;
          case 107: 
            { return MODULE_COMPLIANCE;
            } 
            // fall through
          case 217: break;
          case 108: 
            { return AGENT_CAPABILITIES;
            } 
            // fall through
          case 218: break;
          case 109: 
            { return TEXTUAL_CONVENTION;
            } 
            // fall through
          case 219: break;
          case 110: 
            { return NOTIFICATION_GROUP;
            } 
            // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
