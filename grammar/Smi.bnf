{
    parserClass="pl.jakubchmura.snmp.mib.parser.SmiParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Smi"
    psiImplClassSuffix="Impl"
    psiPackage="pl.jakubchmura.snmp.mib.psi"
    psiImplPackage="pl.jakubchmura.snmp.mib.psi.impl"

    elementTypeFactory="pl.jakubchmura.snmp.mib.psi.SmiElementTypeFactory.createType"
    elementTypeHolderClass="pl.jakubchmura.snmp.mib.psi.SmiTypes"
    elementTypeClass="pl.jakubchmura.snmp.mib.psi.SmiElementType"
    tokenTypeClass="pl.jakubchmura.snmp.mib.psi.SmiTokenType"

    psiImplUtilClass="pl.jakubchmura.snmp.mib.psi.impl.SmiPsiImplUtil"

    tokens=[
        DOT="."
        DOUBLE_DOT=".."
        TRIPLE_DOT="..."
        COMMA=","
        SEMI_COLON=";"
        LEFT_PAREN="("
        RIGHT_PAREN=")"
        LEFT_BRACE="{"
        RIGHT_BRACE="}"
        LEFT_BRACKET="["
        RIGHT_BRACKET="]"
        MINUS="-"
        LESS_THAN="<"
        VERTICAL_BAR="|"
        DEFINITION="::="

        PRIVATE="PRIVATE"

        OBJECT_IDENTIFIER="OBJECT IDENTIFIER"
        OCTET_STRING="OCTET STRING"
        BIT_STRING="BIT STRING"

        PLUS_INFINITY="PLUS-INFINITY"
        MINUS_INFINITY="MINUS-INFINITY"
        MODULE_IDENTITY="MODULE-IDENTITY"
        OBJECT_IDENTITY="OBJECT-IDENTITY"
        OBJECT_TYPE="OBJECT-TYPE"
        NOTIFICATION_TYPE="NOTIFICATION-TYPE"
        TRAP_TYPE="TRAP-TYPE"
        TEXTUAL_CONVENTION="TEXTUAL-CONVENTION"
        OBJECT_GROUP="OBJECT-GROUP"
        NOTIFICATION_GROUP="NOTIFICATION-GROUP"
        MODULE_COMPLIANCE="MODULE-COMPLIANCE"
        AGENT_CAPABILITIES="AGENT-CAPABILITIES"
        LAST_UPDATED="LAST-UPDATED"
        CONTACT_INFO="CONTACT-INFO"
        MAX_ACCESS="MAX-ACCESS"
        MIN_ACCESS="MIN-ACCESS"
        DISPLAY_HINT="DISPLAY-HINT"
        MANDATORY_GROUPS="MANDATORY-GROUPS"
        WRITE_SYNTAX="WRITE-SYNTAX"
        PRODUCT_RELEASE="PRODUCT-RELEASE"
        CREATION_REQUIRES="CREATION-REQUIRES"

        BINARY_LITERAL="regexp:'[0-1]*'(B|b)"
        HEXADECIMAL_LITERAL="regexp:'[0-9A-Fa-f]*'(H|h)"
        STRING_LITERAL='regexp:"([^"]|"")*"'
        IDENTIFIER_STRING='regexp:[a-zA-Z][a-zA-Z0-9_-]*'
        NUMBER_LITERAL='regexp:[0-9]+'

        space='regexp:\s+'
        comment='regexp:--.*'
    ]
}

// Module def/import/export

mibFile ::= moduleDefinition+

moduleDefinition ::= moduleIdentifierDefinition DEFINITIONS tagDefault? DEFINITION BEGIN moduleBody? END {
    methods=[getMibNodes getTextualConventions]
}

moduleIdentifierDefinition ::= IDENTIFIER_STRING objectIdentifierValue? {
    implements="pl.jakubchmura.snmp.mib.psi.SmiReferenceableElement"
    methods=[getName setName getPresentation]
    stubClass="pl.jakubchmura.snmp.mib.psi.ModuleIdentifierDefinitionStub"
}

moduleIdentifier ::= IDENTIFIER_STRING objectIdentifierValue? {
    implements="pl.jakubchmura.snmp.mib.psi.SmiIdentifiableElement"
    methods=[getName setName getReference]
}

private moduleReference ::= IDENTIFIER_STRING DOT

private tagDefault ::= (EXPLICIT|IMPLICIT) TAGS

private moduleBody ::= exportList? importList? assignmentList

exportList ::= EXPORTS symbolList? SEMI_COLON
importList ::= IMPORTS symbolsFromModule* SEMI_COLON
symbolsFromModule ::= symbolList FROM moduleIdentifier

private meta comma_separated_list ::= <<param>> ( COMMA <<param>> )*
private meta bar_separated_list ::= <<param>> ( VERTICAL_BAR <<param>> )*

private symbolList ::= <<comma_separated_list symbol>>
symbol ::= symbolName | definedMacroName | builtinType
symbolName ::= IDENTIFIER_STRING {
  implements="pl.jakubchmura.snmp.mib.psi.SmiIdentifiableElement"
  methods=[getName setName getReference]
}

private assignmentList ::= assignment+
assignment ::= (macroDefinition|typeAssignment|valueAssignment) SEMI_COLON?

private macroDefinition ::= macroReference MACRO DEFINITION macroBody {extends=assignment}
private macroReference ::= IDENTIFIER_STRING | definedMacroName
private macroBody ::= (BEGIN macroBodyElement* END) | (moduleReference macroReference)
private macroBodyElement ::= (LEFT_PAREN|RIGHT_PAREN|VERTICAL_BAR|DEFINITION|INTEGER|REAL|BOOLEAN|NULL|BIT|OCTET|STRING|OBJECT|IDENTIFIER|IDENTIFIER_STRING|STRING_LITERAL|OBJECT_IDENTIFIER)


// Type notation

typeAssignment ::= typeName DEFINITION type {extends=assignment}
typeName ::= IDENTIFIER_STRING {
  implements="pl.jakubchmura.snmp.mib.psi.SmiReferenceableElement"
  methods=[getName setName getPresentation getParentAssignment]
  stubClass="pl.jakubchmura.snmp.mib.psi.TextualConventionStub"
}
type ::= builtinType | definedType | definedMacroType | macroDefinition

definedTypeName ::= IDENTIFIER_STRING {
    implements="pl.jakubchmura.snmp.mib.psi.SmiIdentifiableElement"
    methods=[getName setName getReference]
}

definedType ::= moduleReference? definedTypeName valueOrConstraintList? {extends=type}
builtinType ::= nullType | booleanType | realType | integerType | objectIdentifierType | stringType | bitStringType |
                bitsType | sequenceType | sequenceOfType | setType | setOfType | choiceType | enumeratedType |
                selectionType | taggedType | anyType {extends=type}

private nullType ::= NULL
private booleanType ::= BOOLEAN
private realType ::= REAL
private integerType ::= INTEGER valueOrConstraintList?
private objectIdentifierType ::= OBJECT_IDENTIFIER
private stringType ::= OCTET_STRING constraintList?
private bitStringType ::= BIT_STRING valueOrConstraintList?
private bitsType ::= BITS valueOrConstraintList?
sequenceType ::= SEQUENCE LEFT_BRACE elementTypeList? RIGHT_BRACE {extends=builtinType}
sequenceOfType ::= SEQUENCE constraintList? OF type {extends=builtinType}
private setType ::= SET LEFT_BRACE elementTypeList? RIGHT_BRACE
private setOfType ::= SET sizeConstraint? OF type
choiceType ::= CHOICE LEFT_BRACE elementTypeList RIGHT_BRACE {extends=builtinType}
private enumeratedType ::= ENUMERATED namedNumberList
private selectionType ::= IDENTIFIER_STRING LESS_THAN type
private taggedType ::= tag explicitOrImplicitTag? type
private anyType ::= ANY | (ANY DEFINED BY IDENTIFIER_STRING)

private tag ::= LEFT_BRACKET classType? NUMBER_LITERAL RIGHT_BRACKET
private classType ::= UNIVERSAL | APPLICATION | "PRIVATE"
private explicitOrImplicitTag ::= EXPLICIT | IMPLICIT

private elementTypeList ::= <<comma_separated_list elementTyp>>
elementTyp ::= (elementTypeName? type optionalOrDefaultElement?) | (elementTypeName? COMPONENTS OF type)
elementTypeName ::= IDENTIFIER_STRING {
  implements="pl.jakubchmura.snmp.mib.psi.SmiReferenceResolver"
  methods=[getName setName getReference shouldHaveReference]
}
private optionalOrDefaultElement ::= OPTIONAL | (DEFAULT IDENTIFIER_STRING? value)

private valueOrConstraintList ::= namedNumberList | constraintList
private namedNumberList ::= LEFT_BRACE <<comma_separated_list namedNumber>> RIGHT_BRACE
namedNumber ::= IDENTIFIER_STRING LEFT_PAREN number RIGHT_PAREN
number ::= numberValue | binaryValue | hexadecimalValue | definedValue

private constraintList ::= LEFT_PAREN <<bar_separated_list constraint>> RIGHT_PAREN
private constraint ::= valueConstraint | sizeConstraint | alphabetConstraint | containedTypeConstraint | innerTypeConstraint

private valueConstraintList ::= LEFT_PAREN <<bar_separated_list valueConstraint>> RIGHT_PAREN
private valueConstraint ::= lowerEndPoint valueRange?
private valueRange ::= LESS_THAN? DOUBLE_DOT LESS_THAN? upperEndPoint
private lowerEndPoint ::= value | MIN
private upperEndPoint ::= value | MAX

private sizeConstraint ::= SIZE valueConstraintList
private alphabetConstraint ::= FROM valueConstraintList
private containedTypeConstraint ::= INCLUDES type
private innerTypeConstraint ::= (WITH COMPONENTS valueOrConstraintList) | (WITH COMPONENTS componentsList)
private componentsList ::= (LEFT_BRACE componentConstraint componentsListTail* RIGHT_BRACE) | (LEFT_BRACE TRIPLE_DOT componentsListTail+ RIGHT_BRACE)
private componentsListTail ::= COMMA componentConstraint?
private componentConstraint ::= (IDENTIFIER_STRING componentValuePresence?) componentValuePresence
private componentValuePresence ::= (valueOrConstraintList componentPresence?) | componentPresence
private componentPresence ::= PRESENT | ABSENT | OPTIONAL


// Value notation

mibNode ::= IDENTIFIER_STRING {
  mixin="pl.jakubchmura.snmp.mib.psi.impl.SmiMibNodeMixin"
}

valueAssignment ::= mibNode type DEFINITION value {extends=assignment}
value ::= builtinValue | definedValue

private definedValue ::= moduleReference? definedValueName {
    extends=value
}
definedValueName ::= IDENTIFIER_STRING {
    extends=value
    implements=["pl.jakubchmura.snmp.mib.psi.SmiIdentifiableElement" "pl.jakubchmura.snmp.mib.psi.SmiReferenceResolver"]
    methods=[getName setName getReference shouldHaveReference]
}
builtinValue ::= nullValue | booleanValue | specialRealValue | numberValue | binaryValue | hexadecimalValue |
                 stringValue | bitOrObjectIdentifierValue {extends=value}

private nullValue ::= NULL {extends=builtinValue}
private booleanValue ::= TRUE | FALSE {extends=builtinValue}
private specialRealValue ::= PLUS_INFINITY | MINUS_INFINITY {extends=builtinValue}
private numberValue ::= "-"? NUMBER_LITERAL {extends=builtinValue}
private binaryValue ::= BINARY_LITERAL {extends=builtinValue}
private hexadecimalValue ::= HEXADECIMAL_LITERAL {extends=builtinValue}
private stringValue ::= STRING_LITERAL {extends=builtinValue}
bitOrObjectIdentifierValue ::= nameValueList {extends=builtinValue}
private objectIdentifierValue ::= nameValueList
private nameValueList ::= LEFT_BRACE nameValueComponent* RIGHT_BRACE
private nameValueComponent ::= COMMA? nameOrNumber
private nameOrNumber ::= nameValueIndex | nameAndNumber | nameValueString
nameValueString ::= IDENTIFIER_STRING {
    implements="pl.jakubchmura.snmp.mib.psi.SmiIdentifiableElement"
    methods=[getName setName getReference]
}
nameValueIndex ::= NUMBER_LITERAL
nameAndNumber ::= (IDENTIFIER_STRING LEFT_PAREN NUMBER_LITERAL RIGHT_PAREN) | (IDENTIFIER_STRING LEFT_PAREN definedValue RIGHT_PAREN)


// Macro syntax

definedMacroType ::= snmpModuleIdentityMacroType | snmpObjectIdentityMacroType | snmpObjectTypeMacroType |
                     snmpNotificationTypeMacroType | snmpTrapTypeMacroType | snmpTextualConventionMacroType |
                     snmpObjectGroupMacroType | snmpNotificationGroupMacroType | snmpModuleComplianceMacroType |
                     snmpAgentCapabilitiesMacroType {
    extends=type
    methods=[getDescriptionPart getSyntaxPart]
}
private definedMacroName ::= MODULE_IDENTITY | OBJECT_IDENTITY | OBJECT_TYPE | NOTIFICATION_TYPE | TRAP_TYPE | TEXTUAL_CONVENTION | OBJECT_GROUP | NOTIFICATION_GROUP | MODULE_COMPLIANCE | AGENT_CAPABILITIES

snmpModuleIdentityMacroType ::= MODULE_IDENTITY
                                snmpUpdatePart
                                snmpOrganizationPart
                                snmpContactPart
                                snmpDescrPart
                                snmpRevisionPart* {extends=definedMacroType}
snmpObjectIdentityMacroType ::= OBJECT_IDENTITY
                                snmpStatusPart
                                snmpDescrPart
                                snmpReferPart? {extends=definedMacroType}
snmpObjectTypeMacroType ::= OBJECT_TYPE
                            snmpSyntaxPart
                            snmpUnitsPart?
                            snmpAccessPart
                            snmpStatusPart
                            snmpDescrPart?
                            snmpReferPart?
                            snmpIndexPart?
                            snmpDefValPart? {extends=definedMacroType}
snmpNotificationTypeMacroType ::= NOTIFICATION_TYPE
                                  snmpObjectsPart?
                                  snmpStatusPart
                                  snmpDescrPart
                                  snmpReferPart? {extends=definedMacroType}
snmpTrapTypeMacroType ::= TRAP_TYPE
                          snmpEnterprisePart
                          snmpVarPart?
                          snmpDescrPart?
                          snmpReferPart? {extends=definedMacroType}
snmpTextualConventionMacroType ::= TEXTUAL_CONVENTION
                                   snmpDisplayPart?
                                   snmpStatusPart
                                   snmpDescrPart
                                   snmpReferPart?
                                   snmpSyntaxPart {extends=definedMacroType}
snmpObjectGroupMacroType ::= OBJECT_GROUP
                             snmpObjectsPart
                             snmpStatusPart
                             snmpDescrPart
                             snmpReferPart? {extends=definedMacroType}
snmpNotificationGroupMacroType ::= NOTIFICATION_GROUP
                                   snmpNotificationsPart
                                   snmpStatusPart
                                   snmpDescrPart
                                   snmpReferPart? {extends=definedMacroType}
snmpModuleComplianceMacroType ::= MODULE_COMPLIANCE
                                  snmpStatusPart
                                  snmpDescrPart
                                  snmpReferPart?
                                  snmpModulePart+ {extends=definedMacroType}
snmpAgentCapabilitiesMacroType ::= AGENT_CAPABILITIES
                                   snmpProductReleasePart
                                   snmpStatusPart
                                   snmpDescrPart
                                   snmpReferPart?
                                   snmpModuleSupportPart* {extends=definedMacroType}

private snmpUpdatePart ::= LAST_UPDATED STRING_LITERAL
private snmpOrganizationPart ::= ORGANIZATION STRING_LITERAL
private snmpContactPart ::= CONTACT_INFO STRING_LITERAL
snmpDescrPart ::= DESCRIPTION STRING_LITERAL
private snmpRevisionPart ::= REVISION value DESCRIPTION STRING_LITERAL
private snmpStatusPart ::= STATUS IDENTIFIER_STRING
private snmpReferPart ::= REFERENCE STRING_LITERAL
snmpSyntaxPart ::= SYNTAX type
private snmpUnitsPart ::= UNITS STRING_LITERAL
private snmpAccessPart ::= (ACCESS IDENTIFIER_STRING) | (MAX_ACCESS IDENTIFIER_STRING) | (MIN_ACCESS IDENTIFIER_STRING)
snmpIndexPart ::= (INDEX LEFT_BRACE indexValueList RIGHT_BRACE) | (AUGMENTS LEFT_BRACE value RIGHT_BRACE)

private indexValueList ::= <<comma_separated_list indexValue>>
indexValue ::= value | (IMPLIED value) | indexType
indexType ::= integerType | stringType | objectIdentifierType

snmpDefValPart ::= DEFVAL LEFT_BRACE value RIGHT_BRACE
snmpObjectsPart ::= OBJECTS LEFT_BRACE valueList RIGHT_BRACE
valueList ::= <<comma_separated_list value>>

snmpEnterprisePart ::= ENTERPRISE value
snmpVarPart ::= VARIABLES LEFT_BRACE valueList RIGHT_BRACE
private snmpDisplayPart ::= DISPLAY_HINT STRING_LITERAL
private snmpNotificationsPart ::= NOTIFICATIONS LEFT_BRACE valueList RIGHT_BRACE
private snmpModulePart ::= MODULE snmpModuleImport? snmpMandatoryPart? snmpCompliancePart*
private snmpModuleImport ::= moduleIdentifier
private snmpMandatoryPart ::= MANDATORY_GROUPS LEFT_BRACE valueList RIGHT_BRACE
private snmpCompliancePart ::= complianceGroup | complianceObject
private complianceGroup ::= GROUP value snmpDescrPart
private complianceObject ::= OBJECT value snmpSyntaxPart? snmpWriteSyntaxPart? snmpAccessPart? snmpDescrPart
private snmpWriteSyntaxPart ::= WRITE_SYNTAX type
private snmpProductReleasePart ::= PRODUCT_RELEASE STRING_LITERAL
private snmpModuleSupportPart ::= SUPPORTS snmpModuleImport INCLUDES LEFT_BRACE valueList RIGHT_BRACE snmpVariationPart*
private snmpVariationPart ::= VARIATION value snmpSyntaxPart? snmpWriteSyntaxPart? snmpAccessPart? snmpCreationPart? snmpDefValPart? snmpDescrPart
private snmpCreationPart ::= CREATION_REQUIRES LEFT_BRACE valueList RIGHT_BRACE